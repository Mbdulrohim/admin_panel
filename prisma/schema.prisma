generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admins {
  id           Int      @id(map: "Admin_pkey") @default(autoincrement())
  email        String   @unique(map: "Admin_email_key")
  passwordhash String
  role         String
  createdat    DateTime @default(now())
  updatedat    DateTime
  name         String?  @db.VarChar(255)
  status       String?  @default("active") @db.VarChar(50)
}

model categories {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(255)
  drugs drugs[]
}

model diseases {
  id                     Int     @id @default(autoincrement())
  name                   String  @db.VarChar(255)
  profile                String
  diagnosis              String
  prevention             String
  conventional_treatment String
  naturopathic_treatment String
  image_url              String?
  status                 String  @db.VarChar(50)
}

model drugs {
  id               Int         @id @default(autoincrement())
  name             String      @db.VarChar(255)
  category_id      Int?
  profile          String?
  uses             String?
  interactions     String?
  side_effects     String?
  dosage           String?
  image_url        String?
  status           String?     @default("Draft") @db.VarChar(50)
  created_at       DateTime?   @default(now()) @db.Timestamp(6)
  brand_names      String?
  patient_advice   String?
  additional_notes String?
  categories       categories? @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model lifestyle_modifications {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  content    String
  image_url  String    @db.VarChar(255)
  status     String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  pricing    String    @default("Free") @db.VarChar(50)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model marriage_and_sex_matters {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  content    String
  image_url  String    @db.VarChar(255)
  status     String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  pricing    String    @db.VarChar(10)
}

model medicinal_plants {
  id                   Int       @id @default(autoincrement())
  name                 String    @db.VarChar(255)
  profile              String?
  image_url            String?
  created_at           DateTime? @default(now()) @db.Timestamp(6)
  updated_at           DateTime? @default(now()) @db.Timestamp(6)
  medicinal_properties String?
  side_effects         String?
  recipes              String?
  status               String?   @default("Draft") @db.VarChar(50)
}

model messages {
  id                                Int       @id @default(autoincrement())
  sender_id                         Int
  receiver_id                       Int
  content                           String
  is_read                           Boolean   @default(false)
  sent_at                           DateTime? @default(now()) @db.Timestamp(6)
  users_messages_receiver_idTousers users     @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_messages_sender_idTousers   users     @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([receiver_id])
  @@index([sender_id])
}

model notifications {
  id           Int       @id @default(autoincrement())
  recipient_id Int?
  title        String    @db.VarChar(255)
  message      String
  category     String?   @db.VarChar(50)
  sent_at      DateTime? @default(now()) @db.Timestamp(6)
  users        users?    @relation(fields: [recipient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([recipient_id], map: "idx_notifications_recipient_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model pregnancy_and_child_care {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  content    String
  image_url  String    @db.VarChar(255)
  status     String    @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @default(now()) @db.Timestamp(6)
  pricing    String    @db.VarChar(10)
}

model replies {
  id          Int       @id @default(autoincrement())
  ticket_id   Int?
  sender_type String    @db.VarChar(50)
  sender_id   Int
  message     String
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  tickets     tickets?  @relation(fields: [ticket_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([ticket_id], map: "idx_replies_ticket_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model tickets {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  subject     String    @db.VarChar(255)
  description String
  status      String?   @default("open") @db.VarChar(50)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  replies     replies[]
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_tickets_user_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model users {
  id                                   Int             @id @default(autoincrement())
  email                                String          @unique @db.VarChar(255)
  password_hash                        String?
  name                                 String?         @db.VarChar(255)
  is_active                            Boolean?        @default(true)
  created_at                           DateTime?       @default(now()) @db.Timestamp(6)
  updated_at                           DateTime?       @default(now()) @db.Timestamp(6)
  google_id                            String?         @unique @db.VarChar(255)
  profile_image_url                    String?
  clapp_coins_balance                  Decimal?        @default(0) @db.Decimal
  role                                 String?         @default("user") @db.VarChar
  last_login_at                        DateTime?       @db.Timestamp(6)
  last_activity_at                     DateTime?       @db.Timestamp(6)
  phone_number                         String?         @unique @db.VarChar(15)
  username                             String          @unique @db.VarChar(50)
  gender                               String?         @db.VarChar(10)
  country                              String?         @db.VarChar(100)
  state                                String?         @db.VarChar(100)
  language                             String?         @default("English") @db.VarChar(50)
  verification_code                    String?         @db.VarChar(6)
  referral_code                        String?         @db.VarChar(50)
  terms_agreed                         Boolean?        @default(false)
  privacy_policy_agreed                Boolean?        @default(false)
  data_collection_consent              Boolean?        @default(false)
  messages_messages_receiver_idTousers messages[]      @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers   messages[]      @relation("messages_sender_idTousers")
  notifications                        notifications[]
  tickets                              tickets[]

  @@index([is_active], map: "idx_users_is_active")
}
